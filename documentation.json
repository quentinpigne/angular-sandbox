{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "classes": [],
    "directives": [
        {
            "name": "BadgeDirective",
            "id": "directive-BadgeDirective-8c6a238e2b11f97b72abbb10200618a0",
            "file": "projects/ui-lib/src/badge/badge.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, Input, OnInit, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uiBadge]',\n  exportAs: 'uiBadge',\n  host: {\n    'class': 'ui-badge'\n  }\n})\nexport class BadgeDirective implements OnInit {\n\n  @Input('uiBadge') content: string | number | undefined | null;\n\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) { }\n\n  ngOnInit(): void {\n    this.createBadgeElement();\n  }\n\n  private createBadgeElement(): void {\n    const badgeElement = this.renderer.createElement('span');\n    const contentClass = 'ui-badge-content';\n\n    badgeElement.textContent = this.stringifyContent();\n    badgeElement.classList.add(contentClass);\n\n    this.elementRef.nativeElement.appendChild(badgeElement);\n  }\n\n  private stringifyContent(): string {\n    return this.content == null ? '' : `${this.content}`;\n  }\n}\n",
            "selector": "[uiBadge]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "uiBadge",
                    "line": 12,
                    "type": "string | number | undefined | null"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "createBadgeElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "stringifyContent",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ErrorDirective",
            "id": "directive-ErrorDirective-26fd1f837a1836ceb5226f52736d285a",
            "file": "projects/ui-lib/src/form-field/error.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive } from '@angular/core';\n\n@Directive({\n  selector: 'ui-error',\n  exportAs: 'uiError',\n  host: {\n    'class': 'ui-error'\n  }\n})\nexport class ErrorDirective {\n\n  constructor() { }\n\n}\n",
            "selector": "ui-error",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            }
        },
        {
            "name": "InputDirective",
            "id": "directive-InputDirective-15b9c2295d20f74a9f89f22fc304dddc",
            "file": "projects/ui-lib/src/input/input.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive } from '@angular/core';\n\n@Directive({\n  selector: 'input[uiInput]',\n  exportAs: 'uiInput',\n  host: {\n    'class': 'ui-input'\n  }\n})\nexport class InputDirective {\n\n  constructor() { }\n\n}\n",
            "selector": "input[uiInput]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            }
        }
    ],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-a74d0e543849ac0fcf18fc7aacbbb17f",
            "file": "projects/ui-lib/src/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "uiButton",
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "button[ui-button]",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "template": "<ng-content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 20,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'button[ui-button]',\n  exportAs: 'uiButton',\n  template: `\n    <ng-content></ng-content>\n  `,\n  host: {\n    'class': 'ui-button',\n    '[attr.disabled]': 'disabled || null'\n  },\n  styleUrls: ['./button.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ButtonComponent {\n\n  @Input()\n  disabled: boolean = false;\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"../core/style/button-common\";\n\n$padding: 10px 10px;\n\n.ui-button {\n  @include button-common.reset();\n  padding: $padding;\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 20
            }
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-378183493637947593ed6ed455fa99d8",
            "file": "projects/ui-lib/src/checkbox/checkbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "uiCheckbox",
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "UI_CHECKBOX_VALUE_ACCESSOR_PROVIDER"
                }
            ],
            "selector": "ui-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "line": 40,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "line": 50
                },
                {
                    "name": "id",
                    "defaultValue": "this._uniqueId",
                    "line": 31,
                    "type": "string"
                },
                {
                    "name": "name",
                    "defaultValue": "null",
                    "line": 35,
                    "type": "string | null"
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 36,
                    "type": "boolean"
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "line": 37,
                    "type": "string | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 59,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_checked",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_controlValueAccessorChangeFn",
                    "defaultValue": "() => {...}",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "_uniqueId",
                    "defaultValue": "`ui-checkbox-${++nextUniqueId}`",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nlet nextUniqueId = 0;\n\nconst UI_CHECKBOX_VALUE_ACCESSOR_PROVIDER = {\n  provide: NG_VALUE_ACCESSOR,\n  multi: true,\n  useExisting: forwardRef(() => CheckboxComponent),\n};\n\n@Component({\n  selector: 'ui-checkbox',\n  exportAs: 'uiCheckbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss'],\n  host: {\n    'class': 'ui-checkbox',\n    '[id]': 'id',\n    '[class.ui-checkbox-checked]': 'checked',\n    '[class.ui-checkbox-disabled]': 'disabled',\n  },\n  providers: [UI_CHECKBOX_VALUE_ACCESSOR_PROVIDER],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n\n  private _uniqueId: string = `ui-checkbox-${++nextUniqueId}`;\n\n  @Input() id: string = this._uniqueId;\n\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  @Input() name: string | null = null;\n  @Input() required: boolean = false;\n  @Input() value: string | null = null;\n\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  @Output() readonly change: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(this.checked);\n  }\n\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  onChange(event: Event) {\n    event.stopPropagation();\n  }\n\n  onInputClick(event: Event) {\n    event.stopPropagation();\n\n    if (!this.disabled) {\n      this.toggle();\n      this._emitChangeEvent();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "inputId": {
                    "name": "inputId",
                    "getSignature": {
                        "name": "inputId",
                        "type": "string",
                        "returnType": "string",
                        "line": 33
                    }
                },
                "checked": {
                    "name": "checked",
                    "setSignature": {
                        "name": "checked",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<input #input type=\"checkbox\"\n  class=\"ui-checkbox-input\"\n  [id]=\"inputId\"\n  [required]=\"required\"\n  [checked]=\"checked\"\n  [attr.value]=\"value\"\n  [disabled]=\"disabled\"\n  [attr.name]=\"name\"\n  (change)=\"onChange($event)\"\n  (click)=\"onInputClick($event)\">\n<label [attr.for]=\"inputId\">\n  <ng-content></ng-content>\n</label>\n"
        },
        {
            "name": "FormFieldComponent",
            "id": "component-FormFieldComponent-3fcbc479247f8a15da85c55e48089ed4",
            "file": "projects/ui-lib/src/form-field/form-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "uiFormField",
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-form-field",
            "styleUrls": [
                "./form-field.component.scss",
                "./form-field-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'ui-form-field',\n  exportAs: 'uiFormField',\n  templateUrl: './form-field.component.html',\n  styleUrls: [\n    './form-field.component.scss',\n    './form-field-input.component.scss'\n  ],\n  host: {\n    'class': 'ui-form-field'\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FormFieldComponent {\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ui-error {\n  display: block;\n  color: red;\n  font-size: 0.7em;\n  font-weight: bold;\n}\n",
                    "styleUrl": "./form-field.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./form-field-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "templateData": "<ng-content></ng-content>\n<ng-content select=\"ui-error\"></ng-content>\n"
        }
    ],
    "modules": [
        {
            "name": "BadgeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BadgeDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BadgeDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckboxModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormFieldModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ErrorDirective"
                        },
                        {
                            "name": "FormFieldComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ErrorDirective"
                        },
                        {
                            "name": "FormFieldComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "nextUniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/checkbox/checkbox.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "Principal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/badge/badge.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Principal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Principal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/input/input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Principal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/badge/badge.stories.ts",
                "type": "Story<>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <div uiBadge=\"1\">{{libelle}}</div>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/button/button.stories.ts",
                "type": "Story<>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <button ui-button [disabled]=${args.disabled}>{{libelle}}</button>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/input/input.stories.ts",
                "type": "Story<InputDirective>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-form-field>\n      <input uiInput type=\"text\" placeholder=\"This is a text input\" />\n      <ui-error>This is an error message</ui-error>\n    </ui-form-field>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/checkbox/checkbox.stories.ts",
                "type": "Story<>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-checkbox>{{libelle}}</ui-checkbox>\n  `\n})"
            },
            {
                "name": "UI_CHECKBOX_VALUE_ACCESSOR_PROVIDER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/checkbox/checkbox.component.ts",
                "type": "object",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  multi: true,\n  useExisting: forwardRef(() => CheckboxComponent),\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "projects/ui-lib/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/ui-lib/src/button/button.stories.ts": [
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Principal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/button/button.stories.ts",
                    "type": "Story<>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <button ui-button [disabled]=${args.disabled}>{{libelle}}</button>\n  `\n})"
                }
            ],
            "projects/ui-lib/src/checkbox/checkbox.component.ts": [
                {
                    "name": "nextUniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/checkbox/checkbox.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                },
                {
                    "name": "UI_CHECKBOX_VALUE_ACCESSOR_PROVIDER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/checkbox/checkbox.component.ts",
                    "type": "object",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  multi: true,\n  useExisting: forwardRef(() => CheckboxComponent),\n}"
                }
            ],
            "projects/ui-lib/src/badge/badge.stories.ts": [
                {
                    "name": "Principal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/badge/badge.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/badge/badge.stories.ts",
                    "type": "Story<>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <div uiBadge=\"1\">{{libelle}}</div>\n  `\n})"
                }
            ],
            "projects/ui-lib/src/input/input.stories.ts": [
                {
                    "name": "Principal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/input/input.stories.ts",
                    "type": "Story<InputDirective>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-form-field>\n      <input uiInput type=\"text\" placeholder=\"This is a text input\" />\n      <ui-error>This is an error message</ui-error>\n    </ui-form-field>\n  `\n})"
                }
            ],
            "projects/ui-lib/src/checkbox/checkbox.stories.ts": [
                {
                    "name": "Principal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/checkbox/checkbox.stories.ts",
                    "type": "Story<>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-checkbox>{{libelle}}</ui-checkbox>\n  `\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ui-lib/src/badge/badge.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BadgeDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Principal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Principal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/checkbox/checkbox.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextUniqueId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/checkbox/checkbox.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UI_CHECKBOX_VALUE_ACCESSOR_PROVIDER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Principal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/form-field/error.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ErrorDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/form-field/form-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/input/input.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "InputDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Principal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}