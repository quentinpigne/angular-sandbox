{
    "pipes": [],
    "interfaces": [
        {
            "name": "CanBeDisabled",
            "id": "interface-CanBeDisabled-49198c958c6be269cafbcb4ec8670edd07970e669a9d63080ae63574c62840809b98fad1fb09505cf5960dd009c3da7f997f445c494ec1a9ed4be2bb0ff972f4",
            "file": "projects/ui-lib/src/core/mixins/disabled.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Constructor } from './constructors';\n\nexport interface CanBeDisabled {\n  disabled: boolean;\n}\n\nexport function mixinDisabled<TBase extends Constructor>(Base: TBase): TBase & Constructor<CanBeDisabled> {\n  return class Disabled extends Base {\n    private _disabled: boolean = false;\n\n    get disabled(): boolean {\n      return this._disabled;\n    }\n\n    set disabled(disabled: boolean) {\n      this._disabled = disabled;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(...args: any[]) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      super(...args);\n    }\n  };\n}\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CanBeRequired",
            "id": "interface-CanBeRequired-8ca559c92822ccc990de107635653f97231150e37f4d8b8341ce428dab298e9bce1c3a6fae3b057d8dddfbbd7c26f9ffedbad01c391f77876ebd67e8ca2609f2",
            "file": "projects/ui-lib/src/core/mixins/required.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Constructor } from './constructors';\n\nexport interface CanBeRequired {\n  required: boolean;\n}\n\nexport function mixinRequired<TBase extends Constructor>(Base: TBase): TBase & Constructor<CanBeRequired> {\n  return class Required extends Base {\n    private _required: boolean = false;\n\n    get required(): boolean {\n      return this._required;\n    }\n\n    set required(required: boolean) {\n      this._required = required;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(...args: any[]) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      super(...args);\n    }\n  };\n}\n",
            "properties": [
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "OverlayContainerService",
            "id": "injectable-OverlayContainerService-8c3a04bc4adbfd003561dfee3932f5161890df41806607692b505d0427f300227698a6991d8acdc99452b291b9e427b45e93f07f4e6f7c61dcb3dbe7f6c7c97a",
            "file": "projects/ui-lib/src/core/overlay/overlay-container.service.ts",
            "properties": [
                {
                    "name": "_containerElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLDivElement",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_document",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Document",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_createContainerElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OverlayContainerService {\n  private _containerElement!: HTMLDivElement;\n  private _document: Document;\n\n  get containerElement(): HTMLDivElement {\n    if (!this._containerElement) {\n      this._createContainerElement();\n    }\n    return this._containerElement;\n  }\n\n  constructor(@Inject(DOCUMENT) document: Document) {\n    this._document = document;\n  }\n\n  private _createContainerElement(): void {\n    const CONTAINER_CLASS: string = 'ui-overlay-container';\n\n    const container: HTMLDivElement = this._document.createElement('div');\n    container.classList.add(CONTAINER_CLASS);\n\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "containerElement": {
                    "name": "containerElement",
                    "getSignature": {
                        "name": "containerElement",
                        "type": "",
                        "returnType": "HTMLDivElement",
                        "line": 11
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "PopupService",
            "id": "class-PopupService-f9cc4957f48ebfbee4096b453668b383d30dc6ac09a4af720d0e4cbdc7b978f630b3288e750b6fe6f8e41997782e34eda14e1dde6a42f2c1cebf7844f12b657e",
            "file": "projects/ui-lib/src/core/popup/popup.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ComponentFactoryResolver, ComponentRef, Injector, Renderer2, Type, ViewContainerRef } from '@angular/core';\n\nexport class PopupService<T> {\n  private _popupRef: ComponentRef<T> | null = null;\n\n  constructor(\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _injector: Injector,\n    private _renderer: Renderer2,\n    private _type: Type<T>,\n    private _viewContainerRef: ViewContainerRef,\n  ) {}\n\n  open(content: string): ComponentRef<T> {\n    this._popupRef = this._viewContainerRef.createComponent(\n      this._componentFactoryResolver.resolveComponentFactory<T>(this._type),\n      this._viewContainerRef.length,\n      this._injector,\n      [[this._renderer.createText(content)]],\n    );\n    return this._popupRef;\n  }\n\n  close() {\n    if (this._popupRef) {\n      this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._popupRef.hostView));\n      this._popupRef = null;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_type",
                        "type": "Type<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "_componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_type",
                        "type": "Type<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_popupRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<T> | null",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "BadgeDirective",
            "id": "directive-BadgeDirective-32c41baccfebf79babeb38dfd9dddf91c90fb047c6ce0eb70d785c69f411d8fe699b12b954c1b2bc4d7dd9706820a5b480458be17708ea4de6148d88236b9746",
            "file": "projects/ui-lib/src/badge/embedded/badge.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostBinding, Input, OnInit, Renderer2 } from '@angular/core';\n\nexport type UiBadgePosition =\n  | 'top left'\n  | 'top right'\n  | 'bottom left'\n  | 'below right'\n  | 'left'\n  | 'right'\n  | 'top'\n  | 'bottom';\n\n@Directive({\n  selector: '[uiBadge]',\n  exportAs: 'uiBadge',\n})\nexport class BadgeDirective implements OnInit {\n  @HostBinding('class') cssClass: string = 'ui-badge-host';\n\n  @Input('uiBadgePosition')\n  set position(newPosition: UiBadgePosition) {\n    this.isTop = newPosition.indexOf('bottom') === -1;\n    this.isBottom = !this.isTop;\n    this.isRight = newPosition.indexOf('left') === -1;\n    this.isLeft = !this.isRight;\n  }\n\n  @HostBinding('class.ui-badge-top') isTop: boolean = true;\n  @HostBinding('class.ui-badge-bottom') isBottom: boolean = false;\n  @HostBinding('class.ui-badge-right') isRight: boolean = true;\n  @HostBinding('class.ui-badge-left') isLeft: boolean = false;\n\n  @Input('uiBadge')\n  get content(): string | number | undefined | null {\n    return this._content;\n  }\n  set content(newContent: string | number | undefined | null) {\n    this._content = newContent;\n    this.updateBadgeElement(newContent);\n  }\n  private _content: string | number | undefined | null;\n\n  private _badgeElement: HTMLSpanElement | undefined;\n\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    if (!this._badgeElement) {\n      this._badgeElement = this.createBadgeElement();\n      this.updateBadgeElement(this.content);\n    }\n  }\n\n  private createBadgeElement(): HTMLSpanElement {\n    const badgeElement = this.renderer.createElement('span') as HTMLSpanElement;\n\n    badgeElement.classList.add('ui-badge');\n    badgeElement.classList.add('ui-badge-embedded');\n\n    const hostElement = this.elementRef.nativeElement as HTMLElement;\n    hostElement.appendChild(badgeElement);\n\n    return badgeElement;\n  }\n\n  private updateBadgeElement(newContent: string | number | undefined | null): void {\n    if (this._badgeElement) {\n      this._badgeElement.textContent = this.normalizeContent(newContent);\n    }\n  }\n\n  private normalizeContent(content: string | number | undefined | null): string {\n    return content == null ? '' : `${content}`;\n  }\n}\n",
            "selector": "[uiBadge]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "uiBadge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string | number | undefined | null",
                    "decorators": []
                },
                {
                    "name": "uiBadgePosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'ui-badge-host'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class.ui-badge-bottom",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.ui-badge-left",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.ui-badge-right",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.ui-badge-top",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_badgeElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLSpanElement | undefined",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | undefined | null",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "cssClass",
                    "defaultValue": "'ui-badge-host'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                },
                {
                    "name": "isBottom",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.ui-badge-bottom'"
                        }
                    ]
                },
                {
                    "name": "isLeft",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.ui-badge-left'"
                        }
                    ]
                },
                {
                    "name": "isRight",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.ui-badge-right'"
                        }
                    ]
                },
                {
                    "name": "isTop",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.ui-badge-top'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createBadgeElement",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLSpanElement",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "normalizeContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "string | number | undefined | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string | number | undefined | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBadgeElement",
                    "args": [
                        {
                            "name": "newContent",
                            "type": "string | number | undefined | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "newContent",
                            "type": "string | number | undefined | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "position": {
                    "name": "position",
                    "setSignature": {
                        "name": "position",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newPosition",
                                "type": "UiBadgePosition",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "newPosition",
                                "type": "UiBadgePosition",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "content": {
                    "name": "content",
                    "setSignature": {
                        "name": "content",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newContent",
                                "type": "string | number | undefined | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "newContent",
                                "type": "string | number | undefined | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "content",
                        "type": "",
                        "returnType": "string | number | undefined | null",
                        "line": 34
                    }
                }
            }
        },
        {
            "name": "ErrorDirective",
            "id": "directive-ErrorDirective-eb10a7ab1f28934e9ea79da620b4a77527abcedb122bb58f30561b2e9eeb7b744f68003daf7b77817e4dee841dffd488b401bc5a108c8996b3d21a829e7edc61",
            "file": "projects/ui-lib/src/form-field/error.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding } from '@angular/core';\n\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'ui-error',\n  exportAs: 'uiError',\n})\nexport class ErrorDirective {\n  @HostBinding('class') cssClass: string = 'ui-error';\n}\n",
            "selector": "ui-error",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'ui-error'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "cssClass",
                    "defaultValue": "'ui-error'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": []
        },
        {
            "name": "InputDirective",
            "id": "directive-InputDirective-825192a4d142d14207a542ac5bee8261bf09c27a545fe4ed15bf21dc13f94bef3d4ba4988d7275af86c3e0e2db9a951745d5a6af069e148936d52d18056f23e3",
            "file": "projects/ui-lib/src/input/input.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding } from '@angular/core';\n\n@Directive({\n  selector: 'input[uiInput]',\n  exportAs: 'uiInput',\n})\nexport class InputDirective {\n  @HostBinding('class') cssClass: string = 'ui-input';\n}\n",
            "selector": "input[uiInput]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'ui-input'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "cssClass",
                    "defaultValue": "'ui-input'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": []
        },
        {
            "name": "RadioGroupDirective",
            "id": "directive-RadioGroupDirective-ad89dc6f1135988ed210e40bb373901f355801417e071732a47fe85981d76aa0027ebe1817718b43b0d05034f62f5c9ba688d726215d3d309af518712e38acc0",
            "file": "projects/ui-lib/src/radio/radio-group.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  InjectionToken,\n  Input,\n  Output,\n  Provider,\n  QueryList,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { RadioButtonComponent } from './radio-button.component';\n\nlet nextUniqueId = 0;\n\nexport const UI_RADIO_GROUP = new InjectionToken<RadioGroupDirective>('RadioGroupDirective');\n\nexport const UI_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioGroupDirective),\n  multi: true,\n};\n\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'ui-radio-group',\n  exportAs: 'uiRadioGroup',\n  providers: [UI_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, { provide: UI_RADIO_GROUP, useExisting: RadioGroupDirective }],\n})\nexport class RadioGroupDirective implements ControlValueAccessor {\n  @HostBinding('class') cssClass: string = 'ui-radio-group';\n\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n  set name(newName: string) {\n    this._name = newName;\n    this._updateRadioButtonNames();\n  }\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  @Input()\n  get value(): unknown {\n    return this._value;\n  }\n  set value(newValue: unknown) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n      this._updateSelectedRadioFromValue();\n    }\n  }\n  private _value: unknown;\n\n  @Input()\n  get selected(): RadioButtonComponent | null {\n    return this._selected;\n  }\n  set selected(selected: RadioButtonComponent | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n  private _selected: RadioButtonComponent | null = null;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(newDisabledValue: boolean) {\n    this._disabled = newDisabledValue;\n    this._radios?.forEach((radio) => radio.markForCheck());\n  }\n  private _disabled: boolean = false;\n\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(newRequiredValue: boolean) {\n    this._required = newRequiredValue;\n    this._radios?.forEach((radio) => radio.markForCheck());\n  }\n  private _required: boolean = false;\n\n  _controlValueAccessorChangeFn: (value: unknown) => void = () => {};\n\n  _onTouched: () => unknown = () => {};\n\n  @Output() readonly change: EventEmitter<unknown> = new EventEmitter<unknown>();\n\n  @ContentChildren(forwardRef(() => RadioButtonComponent), { descendants: true })\n  private _radios: QueryList<RadioButtonComponent> | undefined;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  private _updateRadioButtonNames(): void {\n    this._radios?.forEach((radio) => {\n      radio.name = this.name;\n      radio.markForCheck();\n    });\n  }\n\n  private _updateSelectedRadioFromValue(): void {\n    this._radios?.forEach((radio) => {\n      radio.checked = this._value === radio.value;\n    });\n  }\n\n  private _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  writeValue(value: unknown): void {\n    this.value = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  registerOnChange(fn: (value: unknown) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: () => unknown): void {\n    this._onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n}\n",
            "selector": "ui-radio-group",
            "providers": [
                {
                    "name": "UI_RADIO_GROUP_CONTROL_VALUE_ACCESSOR"
                },
                {
                    "name": "{ provide: UI_RADIO_GROUP, useExisting: RadioGroupDirective }",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "RadioButtonComponent | null",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<unknown>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "EventEmitter<>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'ui-radio-group'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_controlValueAccessorChangeFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_name",
                    "defaultValue": "`mat-radio-group-${nextUniqueId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "_radios",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<RadioButtonComponent> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "undefined, {descendants: true}"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_selected",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RadioButtonComponent | null",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "cssClass",
                    "defaultValue": "'ui-radio-group'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_checkSelectedRadioButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_updateRadioButtonNames",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_updateSelectedRadioFromValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "ControlValueAccessor"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 96,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "name": {
                    "name": "name",
                    "setSignature": {
                        "name": "name",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newName",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "newName",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "name",
                        "type": "string",
                        "returnType": "string",
                        "line": 37
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newValue",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "newValue",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 47
                    }
                },
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "selected",
                                "type": "RadioButtonComponent | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 62,
                        "jsdoctags": [
                            {
                                "name": "selected",
                                "type": "RadioButtonComponent | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selected",
                        "type": "",
                        "returnType": "RadioButtonComponent | null",
                        "line": 59
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newDisabledValue",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 73,
                        "jsdoctags": [
                            {
                                "name": "newDisabledValue",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 70
                    }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                        "name": "required",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newRequiredValue",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 83,
                        "jsdoctags": [
                            {
                                "name": "newRequiredValue",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "required",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 80
                    }
                }
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-6e5c6f8f24e4c8d9661e7fdfc371c4177072381a26ce94d1480b1cd4e99d88d4b95c88173fd0448bf53958e4c180005a9a2597f601bae2f4bd008a631d7b1289",
            "file": "projects/ui-lib/src/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { OverlayContainerService } from '../core/overlay/overlay-container.service';\nimport { PopupService } from '../core/popup/popup.service';\nimport { listenToTriggers } from '../core/triggers/triggers';\n\nimport { TooltipComponent } from './tooltip.component';\n\n@Directive({\n  selector: '[uiTooltip]',\n  exportAs: 'uiTooltip',\n})\nexport class TooltipDirective implements OnInit, OnDestroy {\n  private _popupService!: PopupService<TooltipComponent>;\n  private _tooltipRef: ComponentRef<TooltipComponent> | null = null;\n  private _triggersSubscription!: Subscription;\n\n  @Input('uiTooltip') content: string = '';\n\n  @Input('uiTooltipOpenDelay') openDelay: number = 0;\n\n  @Input('uiTooltipCloseDelay') closeDelay: number = 0;\n\n  constructor(\n    private elementRef: ElementRef<HTMLElement>,\n    private renderer: Renderer2,\n    private injector: Injector,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private viewContainerRef: ViewContainerRef,\n    private overlayContainer: OverlayContainerService,\n  ) {}\n\n  ngOnInit(): void {\n    this._popupService = new PopupService(\n      this.componentFactoryResolver,\n      this.injector,\n      this.renderer,\n      TooltipComponent,\n      this.viewContainerRef,\n    );\n    this._triggersSubscription = listenToTriggers(\n      this.renderer,\n      this.elementRef.nativeElement,\n      this.isOpen.bind(this),\n      this.open.bind(this),\n      this.close.bind(this),\n      this.openDelay,\n      this.closeDelay,\n    );\n  }\n\n  ngOnDestroy(): void {\n    this._triggersSubscription.unsubscribe();\n  }\n\n  isOpen(): boolean {\n    return this._tooltipRef !== null;\n  }\n\n  open() {\n    const container: HTMLDivElement = this.overlayContainer.containerElement;\n    this._tooltipRef = this._popupService.open(this.content);\n    container.appendChild(this._tooltipRef.location.nativeElement);\n    const hostElement: HTMLElement = this.elementRef.nativeElement;\n    const hostElPosition = hostElement.getBoundingClientRect();\n    const tooltipElement: HTMLElement = this._tooltipRef.location.nativeElement as HTMLElement;\n    const tooltipStyle: CSSStyleDeclaration = tooltipElement.style;\n    const topPosition = hostElPosition?.top + hostElPosition?.height;\n    const leftPosition = hostElPosition.left + hostElPosition.width / 2 - tooltipElement.offsetWidth / 2;\n    tooltipStyle.position = 'absolute';\n    tooltipStyle.top = '0';\n    tooltipStyle.left = '0';\n    tooltipElement.style.transform = `translate(${leftPosition}px, ${topPosition}px)`;\n  }\n\n  close() {\n    this._popupService.close();\n  }\n}\n",
            "selector": "[uiTooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "uiTooltip",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "uiTooltipCloseDelay",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "uiTooltipOpenDelay",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_popupService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopupService<TooltipComponent>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_tooltipRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<TooltipComponent> | null",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_triggersSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "overlayContainer",
                        "type": "OverlayContainerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "overlayContainer",
                        "type": "OverlayContainerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "BadgeComponent",
            "id": "component-BadgeComponent-e3b8733bc0ba4450058b3dfe4c812599154901a6dcf41d952f517a878d10193738ef6e7ab18e52d99e21ca4de3b440de660714a89e529adfc326b61aa0b57f65",
            "file": "projects/ui-lib/src/badge/standalone/badge.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "uiBadge",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-badge",
            "styleUrls": [
                "./badge.component.scss"
            ],
            "styles": [],
            "template": "<span>{{ content }}</span>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string | number | undefined | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cssClass",
                    "defaultValue": "'ui-badge'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'ui-badge'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'ui-badge',\n  exportAs: 'uiBadge',\n  template: `<span>{{ content }}</span>`,\n  styleUrls: ['./badge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BadgeComponent {\n  @HostBinding('class') cssClass: string = 'ui-badge';\n\n  @Input() content: string | number | undefined | null;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./badge.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-0b64ac488ca8a719258e873a8c4648cd7aa264e14d52dab381dce55805f155186250002d7fed62763cf8eed8d6414608721ff02325045c79fca91f006860076b",
            "file": "projects/ui-lib/src/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "uiButton",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "button[ui-button]",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cssClass",
                    "defaultValue": "'ui-button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'ui-button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'button[ui-button]',\n  exportAs: 'uiButton',\n  template: `<ng-content></ng-content>`,\n  styleUrls: ['./button.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonComponent {\n  @HostBinding('class') cssClass: string = 'ui-button';\n\n  @Input()\n  @HostBinding('disabled')\n  disabled: boolean = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"../core/style/button-common\";\n\n$padding: 10px 10px;\n\n.ui-button {\n  @include button-common.reset();\n  padding: $padding;\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-6b2814b08175cbacd46d48047e1b16ca7781cca08a7eb04eb3f6c270252601bb282c8f2aa1689b7cc09838a61031bd57d136f27d53025934f7bdb89397799c99",
            "file": "projects/ui-lib/src/checkbox/checkbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "uiCheckbox",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "UI_CHECKBOX_VALUE_ACCESSOR_PROVIDER"
                }
            ],
            "selector": "ui-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this._uniqueId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_controlValueAccessorChangeFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "_uniqueId",
                    "defaultValue": "`ui-checkbox-${++nextUniqueId}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "cssClass",
                    "defaultValue": "'ui-checkbox'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'ui-checkbox'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  Input,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nlet nextUniqueId = 0;\n\nconst UI_CHECKBOX_VALUE_ACCESSOR_PROVIDER = {\n  provide: NG_VALUE_ACCESSOR,\n  multi: true,\n  useExisting: forwardRef(() => CheckboxComponent),\n};\n\n@Component({\n  selector: 'ui-checkbox',\n  exportAs: 'uiCheckbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss'],\n  providers: [UI_CHECKBOX_VALUE_ACCESSOR_PROVIDER],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n  @HostBinding('class') cssClass: string = 'ui-checkbox';\n\n  private _uniqueId: string = `ui-checkbox-${++nextUniqueId}`;\n\n  @Input()\n  @HostBinding('id')\n  id: string = this._uniqueId;\n\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  @Input() name: string | null = null;\n  @Input() required: boolean = false;\n  @Input() value: string | null = null;\n\n  @Input()\n  @HostBinding('class.ui-checkbox-checked')\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  @Input()\n  @HostBinding('class.ui-checkbox-disabled')\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  @Output() readonly change: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  _onTouched: () => void = () => {};\n\n  private _controlValueAccessorChangeFn: (value: boolean) => void = () => {};\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  writeValue(value: boolean): void {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: boolean) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(this.checked);\n  }\n\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  onChange(event: Event): void {\n    event.stopPropagation();\n  }\n\n  onInputClick(event: Event): void {\n    event.stopPropagation();\n\n    if (!this.disabled) {\n      this.toggle();\n      this._emitChangeEvent();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 78,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "inputId": {
                    "name": "inputId",
                    "getSignature": {
                        "name": "inputId",
                        "type": "string",
                        "returnType": "string",
                        "line": 40
                    }
                },
                "checked": {
                    "name": "checked",
                    "setSignature": {
                        "name": "checked",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "checked",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 50
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 66,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 63
                    }
                }
            },
            "templateData": "<input type=\"checkbox\"\n  class=\"ui-checkbox-input\"\n  [id]=\"inputId\"\n  [required]=\"required\"\n  [checked]=\"checked\"\n  [attr.value]=\"value\"\n  [disabled]=\"disabled\"\n  [attr.name]=\"name\"\n  (change)=\"onChange($event)\"\n  (click)=\"onInputClick($event)\">\n<label [attr.for]=\"inputId\">\n  <ng-content></ng-content>\n</label>\n"
        },
        {
            "name": "FormFieldComponent",
            "id": "component-FormFieldComponent-0d195d31da51ac326c5f612fe5479c3fb0c1b4b12246ede1aa64c2ca1686472b39cb5460638b54dc36e23bf679b97027f31c9908dc9ab6bf4e948fa1848172dc",
            "file": "projects/ui-lib/src/form-field/form-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "uiFormField",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-form-field",
            "styleUrls": [
                "./form-field.component.scss",
                "./form-field-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cssClass",
                    "defaultValue": "'ui-form-field'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'ui-form-field'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'ui-form-field',\n  exportAs: 'uiFormField',\n  templateUrl: './form-field.component.html',\n  styleUrls: ['./form-field.component.scss', './form-field-input.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormFieldComponent {\n  @HostBinding('class') cssClass: string = 'ui-form-field';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ui-error {\n  display: block;\n  color: red;\n  font-size: 0.7em;\n  font-weight: bold;\n}\n",
                    "styleUrl": "./form-field.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./form-field-input.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-content></ng-content>\n<ng-content select=\"ui-error\"></ng-content>\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-f84853419524a61bc1c5c6881aa9fffee6772e9a5f0cded3f1ccb71164e21a665644614608b6cc2a22ef33600becf0071ef92431891a7affd688d50207bd7f85",
            "file": "projects/ui-lib/src/icon/icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "uiIcon",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cssClass",
                    "defaultValue": "'ui-icon ui-icons'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'ui-icon ui-icons'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'ui-icon',\n  exportAs: 'uiIcon',\n  template: `<ng-content></ng-content>`,\n  styleUrls: ['./icon.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class IconComponent {\n  @HostBinding('class') cssClass: string = 'ui-icon ui-icons';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "OptionComponent",
            "id": "component-OptionComponent-c01854fa296c17c8fe575c042796482662d44d51e5dc18ea8e1b4bbbd2ced926b79affef3cb2379358b8f4228059f72892dec230c7909310bbd821438599885d",
            "file": "projects/ui-lib/src/select/option.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "uiOption",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-option",
            "styleUrls": [
                "./option.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./option.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_select",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectComponent",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "cssClass",
                    "defaultValue": "'ui-option'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'ui-option'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Inject,\n  Input,\n  OnInit,\n  Optional,\n  Renderer2,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { SelectComponent, UI_SELECT } from './select.component';\n\n@Component({\n  selector: 'ui-option',\n  exportAs: 'uiOption',\n  templateUrl: './option.component.html',\n  styleUrls: ['./option.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OptionComponent implements AfterViewInit, OnInit {\n  @HostBinding('class') cssClass: string = 'ui-option';\n\n  @Input() value: unknown;\n  @Input() disabled: boolean = false;\n\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n  set selected(value: boolean) {\n    if (this._selected !== value) {\n      this._selected = value;\n      if (this._select) {\n        this._select.value = this.value;\n      }\n    }\n  }\n  private _selected: boolean = false;\n\n  private _select: SelectComponent;\n\n  constructor(\n    @Optional() @Inject(UI_SELECT) select: SelectComponent,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n  ) {\n    this._select = select;\n  }\n\n  ngOnInit(): void {\n    if (this._select && this._select.value === this.value) {\n      this.selected = true;\n    }\n  }\n\n  ngAfterViewInit(): void {\n    const hostElement = this.elementRef.nativeElement as HTMLElement;\n    const parent = this.renderer.parentNode(hostElement) as HTMLElement;\n\n    while (hostElement.firstChild) {\n      this.renderer.appendChild(parent, hostElement.firstChild);\n    }\n    this.renderer.removeChild(parent, hostElement, true);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./option.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "select",
                        "type": "SelectComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "select",
                        "type": "SelectComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnInit"
            ],
            "accessors": {
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selected",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 31
                    }
                }
            },
            "templateData": "<option [value]=\"value\" [disabled]=\"disabled\" [selected]=\"selected\">\n  <ng-content></ng-content>\n</option>\n"
        },
        {
            "name": "RadioButtonComponent",
            "id": "component-RadioButtonComponent-11b38b6f7ca52f4081e54f1a0de055609b7fc772ab20c6919857182d912e202e37d1c749fdd35b93516417fc50525055689de0eaba97610e05b9065d65c5d329",
            "file": "projects/ui-lib/src/radio/radio-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "uiRadioButton",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-radio-button",
            "styleUrls": [
                "./radio-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this._uniqueId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<unknown>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "EventEmitter<>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_radioGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RadioGroupDirective",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_uniqueId",
                    "defaultValue": "`ui-checkbox-${++nextUniqueId}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "cssClass",
                    "defaultValue": "'ui-radio-button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "markForCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'ui-radio-button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Inject,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { RadioGroupDirective, UI_RADIO_GROUP } from './radio-group.directive';\n\nlet nextUniqueId = 0;\n\n@Component({\n  selector: 'ui-radio-button',\n  exportAs: 'uiRadioButton',\n  templateUrl: './radio-button.component.html',\n  styleUrls: ['./radio-button.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RadioButtonComponent implements OnInit {\n  @HostBinding('class') cssClass: string = 'ui-radio-button';\n\n  private _uniqueId: string = `ui-checkbox-${++nextUniqueId}`;\n\n  @Input()\n  @HostBinding('attr.id')\n  id: string = this._uniqueId;\n\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  @Input() name: string | undefined;\n\n  @Input()\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(newCheckedValue: boolean) {\n    if (this._checked !== newCheckedValue) {\n      this._checked = newCheckedValue;\n      if (this._radioGroup) {\n        const isSelected: boolean = this._radioGroup.value === this.value;\n        if (newCheckedValue && !isSelected) {\n          this._radioGroup.selected = this;\n        } else if (!newCheckedValue && isSelected) {\n          this._radioGroup.selected = null;\n        }\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  private _checked: boolean = false;\n\n  @Input()\n  get value(): unknown {\n    return this._value;\n  }\n  set value(newValue: unknown) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n      if (this._radioGroup) {\n        if (!this.checked) {\n          this.checked = this._radioGroup.value === newValue;\n        }\n        if (this.checked) {\n          this._radioGroup.selected = this;\n        }\n      }\n    }\n  }\n  private _value: unknown = null;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || this._radioGroup?.disabled;\n  }\n  set disabled(newDisabledValue: boolean) {\n    if (this._disabled !== newDisabledValue) {\n      this._disabled = newDisabledValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  @Input()\n  get required(): boolean {\n    return this._required || this._radioGroup?.required;\n  }\n  set required(newRequiredValue: boolean) {\n    if (this._required !== newRequiredValue) {\n      this._required = newRequiredValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _required: boolean = false;\n\n  @Output() readonly change: EventEmitter<unknown> = new EventEmitter<unknown>();\n\n  private _radioGroup: RadioGroupDirective;\n\n  constructor(\n    @Optional() @Inject(UI_RADIO_GROUP) radioGroup: RadioGroupDirective,\n    private _changeDetectorRef: ChangeDetectorRef,\n  ) {\n    this._radioGroup = radioGroup;\n  }\n\n  ngOnInit(): void {\n    if (this._radioGroup) {\n      this.checked = this._radioGroup.value === this.value;\n      if (this.checked) {\n        this._radioGroup.selected = this;\n      }\n      this.name = this._radioGroup.name;\n    }\n  }\n\n  markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  onChange(event: Event): void {\n    event.stopPropagation();\n  }\n\n  onInputClick(event: Event): void {\n    event.stopPropagation();\n\n    if (!this.checked && !this.disabled) {\n      this.checked = true;\n      this.change.emit(this.value);\n\n      if (this._radioGroup) {\n        this._radioGroup._controlValueAccessorChangeFn(this.value);\n\n        const groupValueChanged = this.value !== this._radioGroup.value;\n        if (groupValueChanged) {\n          this._radioGroup.change.emit(this._radioGroup.value);\n        }\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./radio-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "radioGroup",
                        "type": "RadioGroupDirective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 106,
                "jsdoctags": [
                    {
                        "name": "radioGroup",
                        "type": "RadioGroupDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "inputId": {
                    "name": "inputId",
                    "getSignature": {
                        "name": "inputId",
                        "type": "string",
                        "returnType": "string",
                        "line": 35
                    }
                },
                "checked": {
                    "name": "checked",
                    "setSignature": {
                        "name": "checked",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newCheckedValue",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 45,
                        "jsdoctags": [
                            {
                                "name": "newCheckedValue",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "checked",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 42
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newValue",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 65,
                        "jsdoctags": [
                            {
                                "name": "newValue",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 62
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newDisabledValue",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 84,
                        "jsdoctags": [
                            {
                                "name": "newDisabledValue",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 81
                    }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                        "name": "required",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newRequiredValue",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 96,
                        "jsdoctags": [
                            {
                                "name": "newRequiredValue",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "required",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 93
                    }
                }
            },
            "templateData": "<input type=\"radio\"\n  class=\"ui-radio-input\"\n  [id]=\"inputId\"\n  [checked]=\"checked\"\n  [attr.name]=\"name\"\n  [attr.value]=\"value\"\n  (change)=\"onChange($event)\"\n  (click)=\"onInputClick($event)\">\n<label [attr.for]=\"inputId\">\n  <ng-content></ng-content>\n</label>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-56dd153036b9f23626bfb7d940afd03a3438d6e8ef9c2325b62746f9f86214035d67c8687c7b82b80d20cfdebb81d3903eb31a255c9fc8d460ded27b1e5d7172",
            "file": "projects/ui-lib/src/select/select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "uiSelect",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "UI_SELECT_CONTROL_VALUE_ACCESSOR"
                },
                {
                    "name": "{ provide: UI_SELECT, useExisting: SelectComponent }",
                    "type": "component"
                }
            ],
            "selector": "ui-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectionChange",
                    "defaultValue": "new EventEmitter<unknown>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter<>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_controlValueAccessorChangeFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "cssClass",
                    "defaultValue": "'ui-select'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                },
                {
                    "name": "selectElementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'select'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'ui-select'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  InjectionToken,\n  Input,\n  Output,\n  Provider,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const UI_SELECT = new InjectionToken<SelectComponent>('SelectComponent');\n\nexport const UI_SELECT_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'ui-select',\n  exportAs: 'uiSelect',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss'],\n  providers: [UI_SELECT_CONTROL_VALUE_ACCESSOR, { provide: UI_SELECT, useExisting: SelectComponent }],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectComponent implements ControlValueAccessor {\n  @HostBinding('class') cssClass: string = 'ui-select';\n\n  @Input()\n  get value(): unknown {\n    return this._value;\n  }\n  set value(newValue: unknown) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n      this._controlValueAccessorChangeFn(this.value);\n    }\n  }\n  private _value: unknown;\n\n  @Input() required: boolean = false;\n  @Input() disabled: boolean = false;\n\n  @ViewChild('select') selectElementRef!: ElementRef;\n\n  _controlValueAccessorChangeFn: (value: unknown) => void = () => {};\n\n  _onTouched: () => unknown = () => {};\n\n  @Output() readonly selectionChange: EventEmitter<unknown> = new EventEmitter<unknown>();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  onChange(): void {\n    const selectNativeElement = this.selectElementRef.nativeElement as HTMLSelectElement;\n    this.value = selectNativeElement.value;\n    this.selectionChange.emit(this.value);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  writeValue(value: unknown): void {\n    this.value = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  registerOnChange(fn: (value: unknown) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: () => unknown): void {\n    this._onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newValue",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 42,
                        "jsdoctags": [
                            {
                                "name": "newValue",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 39
                    }
                }
            },
            "templateData": "<select #select [required]=\"required\" [disabled]=\"disabled\" (change)=\"onChange()\">\n  <ng-content select=\"ui-option\"></ng-content>\n</select>\n"
        },
        {
            "name": "ToolbarComponent",
            "id": "component-ToolbarComponent-8a9a850cee2929629c45e8ee4ecebd8761b3edf1cf1d5d3411dff8a7cc181c5dc72ae6f2001c8ba567a2c4673ee70ce545a5153b63538db1c39c009db1bb1b4c",
            "file": "projects/ui-lib/src/toolbar/toolbar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "uiToolbar",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-toolbar",
            "styleUrls": [
                "./toolbar.component.scss"
            ],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cssClass",
                    "defaultValue": "'ui-toolbar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'ui-toolbar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'ui-toolbar',\n  exportAs: 'uiToolbar',\n  template: `<ng-content></ng-content>`,\n  styleUrls: ['./toolbar.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToolbarComponent {\n  @HostBinding('class') cssClass: string = 'ui-toolbar';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$row-padding: 16px !default;\n\n.ui-toolbar {\n  display: flex;\n  box-sizing: border-box;\n\n  padding: 0 $row-padding;\n  width: 100%;\n\n  // Flexbox Vertical Alignment\n  flex-direction: row;\n  align-items: center;\n\n  // Disable text wrapping inside of the toolbar. Developers are still able to overwrite it.\n  white-space: nowrap;\n}\n",
                    "styleUrl": "./toolbar.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-1fc26b12b69bfe5dd678e32097f889257614174a9954592aba3440f59e95a8edbb899a2fb38c9ffd13c87aa2ed73eb2a8803ac21d49104796feb441e48709022",
            "file": "projects/ui-lib/src/tooltip/tooltip.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-tooltip",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'ui-tooltip',\n  template: `<ng-content></ng-content>`,\n  styleUrls: ['./tooltip.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TooltipComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "BadgeModule",
            "id": "module-BadgeModule-2e2b0620e03320d880fd3c1dd01afb5efe1f7b8c02baf347f23403c96a198f3d8a6ea0d54df43333ffcb43a7a0270fd23bf51777bf18a2a5a27cc78a35d06923",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ui-lib/src/badge/badge.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BadgeComponent } from './standalone/badge.component';\nimport { BadgeDirective } from './embedded/badge.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [BadgeComponent, BadgeDirective],\n  exports: [BadgeDirective],\n})\nexport class BadgeModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BadgeComponent"
                        },
                        {
                            "name": "BadgeDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BadgeDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-5f64a7635e57f461079d860d77293509666b45f2f2669f180ebe85abb79446c3a2dde4fa2fd6040b97ab6f40bbca87f8416454574919cd78a6259c3c5773304c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ui-lib/src/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ButtonComponent],\n  exports: [ButtonComponent],\n})\nexport class ButtonModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckboxModule",
            "id": "module-CheckboxModule-dadfdb04e27e0b09f65865bb843ba0df2d6ae88ee8a801ce457809bb5aed85a09f148085cd22d8ba7abc01ded8b4fcc022b8368b45f77f18ea1093b49636c48f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ui-lib/src/checkbox/checkbox.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CheckboxComponent } from './checkbox.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [CheckboxComponent],\n  exports: [CheckboxComponent],\n})\nexport class CheckboxModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormFieldModule",
            "id": "module-FormFieldModule-571225c25954d259d63cce363c8c4be5202d14f6a55e52023e9659e1cd4085fc21c03ae23ea3208c335dbf4bfbe319155207722c662082643ab2c7b832755a30",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ui-lib/src/form-field/form-field.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ErrorDirective } from './error.directive';\nimport { FormFieldComponent } from './form-field.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ErrorDirective, FormFieldComponent],\n  exports: [ErrorDirective, FormFieldComponent],\n})\nexport class FormFieldModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ErrorDirective"
                        },
                        {
                            "name": "FormFieldComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ErrorDirective"
                        },
                        {
                            "name": "FormFieldComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconModule",
            "id": "module-IconModule-96810ba18e2bdd049a53220e52b15b2639864151586ad58a86a37d05e4034084f3179acd3381339178a69d863e3edaa1abf67a52d79dbb9a904da4067fe98d43",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ui-lib/src/icon/icon.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [IconComponent],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "id": "module-InputModule-3bdb55e1b5a773791cfee52f6862c8e1e46ab62de7fd622d5b53a7f790dfb94a282e1e739a0fe49865a8acebe2ea48a4892f74da0b5a5aa8e82996a5a62203f2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ui-lib/src/input/input.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { InputDirective } from './input.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [InputDirective],\n  exports: [InputDirective],\n})\nexport class InputModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RadioModule",
            "id": "module-RadioModule-3e2f382f8f472a65fe56cac8a323cad71dcc3b912ba3512323c327b19a070ebe8829a4e6a7700a33df38f70f30863a4b4c17774e3d982a0011fe8f36f10115a0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ui-lib/src/radio/radio.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RadioButtonComponent } from './radio-button.component';\nimport { RadioGroupDirective } from './radio-group.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [RadioButtonComponent, RadioGroupDirective],\n  exports: [RadioButtonComponent, RadioGroupDirective],\n})\nexport class RadioModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "RadioGroupDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "RadioGroupDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectModule",
            "id": "module-SelectModule-6178f4fccd16ffb4560abebc3f823081f188efc131e5411e3ce8fc327086cabce5b04f1f0aee27e243db4459326bdd85e867496c3648f8258e8227149e295b26",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ui-lib/src/select/select.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OptionComponent } from './option.component';\nimport { SelectComponent } from './select.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OptionComponent, SelectComponent],\n  exports: [OptionComponent, SelectComponent],\n})\nexport class SelectModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OptionComponent"
                        },
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "OptionComponent"
                        },
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ToolbarModule",
            "id": "module-ToolbarModule-7c939432a58ab2dcce6deeb7865847a2bed48fe37a4dfbb96ce172341fad2350f09936327cb65386f5ad005b662815c2f2d25a0f73d552ec8656249586495cad",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ui-lib/src/toolbar/toolbar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ToolbarComponent } from './toolbar.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ToolbarComponent],\n  exports: [ToolbarComponent],\n})\nexport class ToolbarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TooltipModule",
            "id": "module-TooltipModule-50b205c02cf7c50b3a7fb21f68dcdcd321b25be6a537b1939c66f6d0f8afce256c3d4fc258d1c4a7d412ef22647ed8bc6e32045d49c03133e69d6a74e420b340",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ui-lib/src/tooltip/tooltip.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipDirective } from './tooltip.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [TooltipComponent, TooltipDirective],\n  entryComponents: [TooltipComponent],\n  exports: [TooltipDirective],\n})\nexport class TooltipModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TooltipComponent"
                        },
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "delayIfNeeded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/core/triggers/triggers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T>(_delay: number) =>\n  _delay > 0 ? delay<T>(_delay) : (triggerState$: Observable<T>) => triggerState$"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Embedded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "EmbeddedTemplate.bind({})"
            },
            {
                "name": "EmbeddedTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <span [uiBadge]=\"content\" [uiBadgePosition]=\"position\">{{libelle}}</span>\n  `,\n})"
            },
            {
                "name": "nextUniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/checkbox/checkbox.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "nextUniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/radio/radio-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "nextUniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/radio/radio-group.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "Principal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Principal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Principal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Principal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Principal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/radio/radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Principal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/select/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Principal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/toolbar/toolbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Principal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Standalone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "StandaloneTemplate.bind({})"
            },
            {
                "name": "StandaloneTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BadgeComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-badge [content]=\"content\"></ui-badge>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<>",
                "defaultValue": "(args) => ({\n  props: args,\n  /* eslint-disable @typescript-eslint/restrict-template-expressions */\n  template: `\n    <button ui-button [disabled]=${args.disabled}>{{libelle}}</button>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-checkbox>{{libelle}}</ui-checkbox>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-icon>{{icon}}</ui-icon>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputDirective>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-form-field>\n      <input uiInput type=\"text\" placeholder=\"This is a text input\" />\n      <ui-error>This is an error message</ui-error>\n    </ui-form-field>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/radio/radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<RadioButtonComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-radio-group value=\"1\">\n      <ui-radio-button value=\"1\">Radio 1</ui-radio-button>\n      <ui-radio-button value=\"2\">Radio 2</ui-radio-button>\n    </ui-radio-group>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/select/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SelectComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-select value=\"2\" [required]=\"true\" (selectionChange)=\"selectionChange($event)\">\n      <ui-option value=\"1\" [disabled]=\"true\">Option 1</ui-option>\n      <ui-option value=\"2\">Option 2</ui-option>\n    </ui-select>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/toolbar/toolbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ToolbarComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-toolbar><ui-icon style=\"font-size: 3em\">home</ui-icon><h1>My App</h1></ui-toolbar>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TooltipDirective>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <span [uiTooltip]=\"content\" [uiTooltipOpenDelay]=\"openDelay\" [uiTooltipCloseDelay]=\"closeDelay\">\n      Hover to show tooltip\n    </span>\n  `,\n})"
            },
            {
                "name": "UI_CHECKBOX_VALUE_ACCESSOR_PROVIDER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/checkbox/checkbox.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  multi: true,\n  useExisting: forwardRef(() => CheckboxComponent),\n}"
            },
            {
                "name": "UI_RADIO_GROUP",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/radio/radio-group.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<RadioGroupDirective>('RadioGroupDirective')"
            },
            {
                "name": "UI_RADIO_GROUP_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/radio/radio-group.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioGroupDirective),\n  multi: true,\n}"
            },
            {
                "name": "UI_SELECT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/select/select.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<SelectComponent>('SelectComponent')"
            },
            {
                "name": "UI_SELECT_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-lib/src/select/select.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectComponent),\n  multi: true,\n}"
            }
        ],
        "functions": [
            {
                "name": "delayTriggers",
                "file": "projects/ui-lib/src/core/triggers/triggers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "activateDelay",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deactivateDelay",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isActive",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "activateDelay",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deactivateDelay",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isActive",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "listenToTriggers",
                "file": "projects/ui-lib/src/core/triggers/triggers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "target",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isActive",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "onActivate",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "onDeactivate",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activateDelay",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "deactivateDelay",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    }
                ],
                "returnType": "Subscription",
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "target",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isActive",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "onActivate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "onDeactivate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activateDelay",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deactivateDelay",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mixinDisabled",
                "file": "projects/ui-lib/src/core/mixins/disabled.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mixinRequired",
                "file": "projects/ui-lib/src/core/mixins/required.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "observeTriggers",
                "file": "projects/ui-lib/src/core/triggers/triggers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "target",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<boolean>",
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "target",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Constructor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ui-lib/src/core/mixins/constructors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 179
            },
            {
                "name": "UiBadgePosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top left\" | \"top right\" | \"bottom left\" | \"below right\" | \"left\" | \"right\" | \"top\" | \"bottom\"",
                "file": "projects/ui-lib/src/badge/embedded/badge.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ui-lib/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/ui-lib/src/core/triggers/triggers.ts": [
                {
                    "name": "delayIfNeeded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/core/triggers/triggers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T>(_delay: number) =>\n  _delay > 0 ? delay<T>(_delay) : (triggerState$: Observable<T>) => triggerState$"
                }
            ],
            "projects/ui-lib/src/button/button.stories.ts": [
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Principal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<>",
                    "defaultValue": "(args) => ({\n  props: args,\n  /* eslint-disable @typescript-eslint/restrict-template-expressions */\n  template: `\n    <button ui-button [disabled]=${args.disabled}>{{libelle}}</button>\n  `,\n})"
                }
            ],
            "projects/ui-lib/src/badge/badge.stories.ts": [
                {
                    "name": "Embedded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "EmbeddedTemplate.bind({})"
                },
                {
                    "name": "EmbeddedTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <span [uiBadge]=\"content\" [uiBadgePosition]=\"position\">{{libelle}}</span>\n  `,\n})"
                },
                {
                    "name": "Standalone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "StandaloneTemplate.bind({})"
                },
                {
                    "name": "StandaloneTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BadgeComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-badge [content]=\"content\"></ui-badge>\n  `,\n})"
                }
            ],
            "projects/ui-lib/src/checkbox/checkbox.component.ts": [
                {
                    "name": "nextUniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/checkbox/checkbox.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                },
                {
                    "name": "UI_CHECKBOX_VALUE_ACCESSOR_PROVIDER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/checkbox/checkbox.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  multi: true,\n  useExisting: forwardRef(() => CheckboxComponent),\n}"
                }
            ],
            "projects/ui-lib/src/radio/radio-button.component.ts": [
                {
                    "name": "nextUniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/radio/radio-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/ui-lib/src/radio/radio-group.directive.ts": [
                {
                    "name": "nextUniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/radio/radio-group.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                },
                {
                    "name": "UI_RADIO_GROUP",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/radio/radio-group.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<RadioGroupDirective>('RadioGroupDirective')"
                },
                {
                    "name": "UI_RADIO_GROUP_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/radio/radio-group.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioGroupDirective),\n  multi: true,\n}"
                }
            ],
            "projects/ui-lib/src/checkbox/checkbox.stories.ts": [
                {
                    "name": "Principal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-checkbox>{{libelle}}</ui-checkbox>\n  `,\n})"
                }
            ],
            "projects/ui-lib/src/icon/icon.stories.ts": [
                {
                    "name": "Principal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-icon>{{icon}}</ui-icon>\n  `,\n})"
                }
            ],
            "projects/ui-lib/src/input/input.stories.ts": [
                {
                    "name": "Principal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputDirective>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-form-field>\n      <input uiInput type=\"text\" placeholder=\"This is a text input\" />\n      <ui-error>This is an error message</ui-error>\n    </ui-form-field>\n  `,\n})"
                }
            ],
            "projects/ui-lib/src/radio/radio.stories.ts": [
                {
                    "name": "Principal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/radio/radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/radio/radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<RadioButtonComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-radio-group value=\"1\">\n      <ui-radio-button value=\"1\">Radio 1</ui-radio-button>\n      <ui-radio-button value=\"2\">Radio 2</ui-radio-button>\n    </ui-radio-group>\n  `,\n})"
                }
            ],
            "projects/ui-lib/src/select/select.stories.ts": [
                {
                    "name": "Principal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/select/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/select/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SelectComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-select value=\"2\" [required]=\"true\" (selectionChange)=\"selectionChange($event)\">\n      <ui-option value=\"1\" [disabled]=\"true\">Option 1</ui-option>\n      <ui-option value=\"2\">Option 2</ui-option>\n    </ui-select>\n  `,\n})"
                }
            ],
            "projects/ui-lib/src/toolbar/toolbar.stories.ts": [
                {
                    "name": "Principal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/toolbar/toolbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/toolbar/toolbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ToolbarComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ui-toolbar><ui-icon style=\"font-size: 3em\">home</ui-icon><h1>My App</h1></ui-toolbar>\n  `,\n})"
                }
            ],
            "projects/ui-lib/src/tooltip/tooltip.stories.ts": [
                {
                    "name": "Principal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TooltipDirective>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <span [uiTooltip]=\"content\" [uiTooltipOpenDelay]=\"openDelay\" [uiTooltipCloseDelay]=\"closeDelay\">\n      Hover to show tooltip\n    </span>\n  `,\n})"
                }
            ],
            "projects/ui-lib/src/select/select.component.ts": [
                {
                    "name": "UI_SELECT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/select/select.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<SelectComponent>('SelectComponent')"
                },
                {
                    "name": "UI_SELECT_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-lib/src/select/select.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectComponent),\n  multi: true,\n}"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ui-lib/src/core/triggers/triggers.ts": [
                {
                    "name": "delayTriggers",
                    "file": "projects/ui-lib/src/core/triggers/triggers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "activateDelay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "deactivateDelay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isActive",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "activateDelay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deactivateDelay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isActive",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listenToTriggers",
                    "file": "projects/ui-lib/src/core/triggers/triggers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "renderer",
                            "type": "Renderer2",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isActive",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "onActivate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "onDeactivate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activateDelay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "deactivateDelay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "returnType": "Subscription",
                    "jsdoctags": [
                        {
                            "name": "renderer",
                            "type": "Renderer2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isActive",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onActivate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onDeactivate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activateDelay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deactivateDelay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "observeTriggers",
                    "file": "projects/ui-lib/src/core/triggers/triggers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "renderer",
                            "type": "Renderer2",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<boolean>",
                    "jsdoctags": [
                        {
                            "name": "renderer",
                            "type": "Renderer2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-lib/src/core/mixins/disabled.ts": [
                {
                    "name": "mixinDisabled",
                    "file": "projects/ui-lib/src/core/mixins/disabled.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-lib/src/core/mixins/required.ts": [
                {
                    "name": "mixinRequired",
                    "file": "projects/ui-lib/src/core/mixins/required.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ui-lib/src/core/mixins/constructors.ts": [
                {
                    "name": "Constructor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ui-lib/src/core/mixins/constructors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 179
                }
            ],
            "projects/ui-lib/src/badge/embedded/badge.directive.ts": [
                {
                    "name": "UiBadgePosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top left\" | \"top right\" | \"bottom left\" | \"below right\" | \"left\" | \"right\" | \"top\" | \"bottom\"",
                    "file": "projects/ui-lib/src/badge/embedded/badge.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ui-lib/src/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Embedded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmbeddedTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Standalone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StandaloneTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/badge/embedded/badge.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BadgeDirective",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/badge/standalone/badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BadgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Principal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/checkbox/checkbox.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextUniqueId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/checkbox/checkbox.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UI_CHECKBOX_VALUE_ACCESSOR_PROVIDER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Principal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/core/mixins/disabled.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CanBeDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/core/mixins/disabled.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "mixinDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/core/mixins/required.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CanBeRequired",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/core/mixins/required.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "mixinRequired",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/core/overlay/overlay-container.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OverlayContainerService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/core/popup/popup.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PopupService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/core/triggers/triggers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "delayTriggers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/core/triggers/triggers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "listenToTriggers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/core/triggers/triggers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "observeTriggers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/core/triggers/triggers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "delayIfNeeded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/form-field/error.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ErrorDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/form-field/form-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Principal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/input/input.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "InputDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Principal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/radio/radio-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/radio/radio-button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextUniqueId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/radio/radio-group.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RadioGroupDirective",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/radio/radio-group.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextUniqueId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/radio/radio-group.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UI_RADIO_GROUP",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/radio/radio-group.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UI_RADIO_GROUP_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/radio/radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Principal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/radio/radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/select/option.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OptionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/select/select.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UI_SELECT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/select/select.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UI_SELECT_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Principal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/toolbar/toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/toolbar/toolbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Principal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/toolbar/toolbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/tooltip/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Principal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-lib/src/tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}